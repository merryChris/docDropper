// Code generated by protoc-gen-go.
// source: platform.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	platform.proto

It has these top-level messages:
	FitRequest
	FilterRequest
	QueryRequest
	CommonResponse
	FilterResponse
	QueryResponse
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FitRequest struct {
	Title   []string `protobuf:"bytes,1,rep,name=title" json:"title,omitempty"`
	Content []string `protobuf:"bytes,2,rep,name=content" json:"content,omitempty"`
}

func (m *FitRequest) Reset()                    { *m = FitRequest{} }
func (m *FitRequest) String() string            { return proto.CompactTextString(m) }
func (*FitRequest) ProtoMessage()               {}
func (*FitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FitRequest) GetTitle() []string {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *FitRequest) GetContent() []string {
	if m != nil {
		return m.Content
	}
	return nil
}

type FilterRequest struct {
	Tokens []string `protobuf:"bytes,1,rep,name=tokens" json:"tokens,omitempty"`
}

func (m *FilterRequest) Reset()                    { *m = FilterRequest{} }
func (m *FilterRequest) String() string            { return proto.CompactTextString(m) }
func (*FilterRequest) ProtoMessage()               {}
func (*FilterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FilterRequest) GetTokens() []string {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type QueryRequest struct {
	Keywords []string `protobuf:"bytes,1,rep,name=keywords" json:"keywords,omitempty"`
}

func (m *QueryRequest) Reset()                    { *m = QueryRequest{} }
func (m *QueryRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()               {}
func (*QueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *QueryRequest) GetKeywords() []string {
	if m != nil {
		return m.Keywords
	}
	return nil
}

type CommonResponse struct {
	Code    int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *CommonResponse) Reset()                    { *m = CommonResponse{} }
func (m *CommonResponse) String() string            { return proto.CompactTextString(m) }
func (*CommonResponse) ProtoMessage()               {}
func (*CommonResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CommonResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CommonResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type FilterResponse struct {
	Code   int32    `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Tokens []string `protobuf:"bytes,2,rep,name=tokens" json:"tokens,omitempty"`
}

func (m *FilterResponse) Reset()                    { *m = FilterResponse{} }
func (m *FilterResponse) String() string            { return proto.CompactTextString(m) }
func (*FilterResponse) ProtoMessage()               {}
func (*FilterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FilterResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *FilterResponse) GetTokens() []string {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type QueryResponse struct {
	Code          int32     `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Keywords      []string  `protobuf:"bytes,2,rep,name=keywords" json:"keywords,omitempty"`
	Probabilities []float32 `protobuf:"fixed32,3,rep,packed,name=probabilities" json:"probabilities,omitempty"`
}

func (m *QueryResponse) Reset()                    { *m = QueryResponse{} }
func (m *QueryResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()               {}
func (*QueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *QueryResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *QueryResponse) GetKeywords() []string {
	if m != nil {
		return m.Keywords
	}
	return nil
}

func (m *QueryResponse) GetProbabilities() []float32 {
	if m != nil {
		return m.Probabilities
	}
	return nil
}

func init() {
	proto.RegisterType((*FitRequest)(nil), "protos.FitRequest")
	proto.RegisterType((*FilterRequest)(nil), "protos.FilterRequest")
	proto.RegisterType((*QueryRequest)(nil), "protos.QueryRequest")
	proto.RegisterType((*CommonResponse)(nil), "protos.CommonResponse")
	proto.RegisterType((*FilterResponse)(nil), "protos.FilterResponse")
	proto.RegisterType((*QueryResponse)(nil), "protos.QueryResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Platform service

type PlatformClient interface {
	Fit(ctx context.Context, opts ...grpc.CallOption) (Platform_FitClient, error)
	Filter(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*FilterResponse, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
}

type platformClient struct {
	cc *grpc.ClientConn
}

func NewPlatformClient(cc *grpc.ClientConn) PlatformClient {
	return &platformClient{cc}
}

func (c *platformClient) Fit(ctx context.Context, opts ...grpc.CallOption) (Platform_FitClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Platform_serviceDesc.Streams[0], c.cc, "/protos.Platform/Fit", opts...)
	if err != nil {
		return nil, err
	}
	x := &platformFitClient{stream}
	return x, nil
}

type Platform_FitClient interface {
	Send(*FitRequest) error
	CloseAndRecv() (*CommonResponse, error)
	grpc.ClientStream
}

type platformFitClient struct {
	grpc.ClientStream
}

func (x *platformFitClient) Send(m *FitRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *platformFitClient) CloseAndRecv() (*CommonResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CommonResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *platformClient) Filter(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*FilterResponse, error) {
	out := new(FilterResponse)
	err := grpc.Invoke(ctx, "/protos.Platform/Filter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := grpc.Invoke(ctx, "/protos.Platform/Query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Platform service

type PlatformServer interface {
	Fit(Platform_FitServer) error
	Filter(context.Context, *FilterRequest) (*FilterResponse, error)
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
}

func RegisterPlatformServer(s *grpc.Server, srv PlatformServer) {
	s.RegisterService(&_Platform_serviceDesc, srv)
}

func _Platform_Fit_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PlatformServer).Fit(&platformFitServer{stream})
}

type Platform_FitServer interface {
	SendAndClose(*CommonResponse) error
	Recv() (*FitRequest, error)
	grpc.ServerStream
}

type platformFitServer struct {
	grpc.ServerStream
}

func (x *platformFitServer) SendAndClose(m *CommonResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *platformFitServer) Recv() (*FitRequest, error) {
	m := new(FitRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Platform_Filter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).Filter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Platform/Filter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).Filter(ctx, req.(*FilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Platform/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Platform_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Platform",
	HandlerType: (*PlatformServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Filter",
			Handler:    _Platform_Filter_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Platform_Query_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Fit",
			Handler:       _Platform_Fit_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "platform.proto",
}

func init() { proto.RegisterFile("platform.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x92, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x9b, 0xd4, 0xc6, 0x3a, 0x98, 0x1c, 0x86, 0xb6, 0x84, 0x9c, 0x64, 0x11, 0x0c, 0x1e,
	0x7a, 0x50, 0x14, 0x04, 0xf1, 0x22, 0xf4, 0xac, 0x79, 0x83, 0xa4, 0x1d, 0x65, 0x69, 0x92, 0x8d,
	0xd9, 0x29, 0xd2, 0xf7, 0xf2, 0x01, 0xcd, 0xbf, 0x35, 0x89, 0x87, 0x9e, 0x92, 0x6f, 0x98, 0x6f,
	0xf8, 0xcd, 0x7c, 0x0b, 0x5e, 0x91, 0xc6, 0xfc, 0xa1, 0xca, 0x6c, 0x5d, 0x94, 0x8a, 0x15, 0x3a,
	0xcd, 0x47, 0x8b, 0x67, 0x80, 0x8d, 0xe4, 0x88, 0xbe, 0x0e, 0xa4, 0x19, 0x17, 0x30, 0x63, 0xc9,
	0x29, 0xf9, 0xd6, 0xd5, 0x34, 0xbc, 0x88, 0x5a, 0x81, 0x3e, 0x9c, 0x6f, 0x55, 0xce, 0x94, 0xb3,
	0x6f, 0x37, 0x75, 0x23, 0xc5, 0x0d, 0xb8, 0x1b, 0x99, 0x32, 0x95, 0x66, 0xc0, 0x0a, 0x1c, 0x56,
	0x7b, 0xca, 0x75, 0x37, 0xa1, 0x53, 0xe2, 0x16, 0x2e, 0xdf, 0x0f, 0x54, 0x1e, 0x4d, 0x5f, 0x00,
	0xf3, 0x3d, 0x1d, 0xbf, 0x55, 0xb9, 0x33, 0x9d, 0x7f, 0x5a, 0xbc, 0x80, 0xf7, 0xaa, 0xb2, 0x4c,
	0xe5, 0x11, 0xe9, 0x42, 0xe5, 0x9a, 0x10, 0xe1, 0x6c, 0xab, 0x76, 0x35, 0x95, 0x15, 0xce, 0xa2,
	0xe6, 0xbf, 0x86, 0xca, 0x48, 0xeb, 0xf8, 0x93, 0x2a, 0x28, 0xab, 0x86, 0xea, 0x64, 0xb5, 0x92,
	0x67, 0xa0, 0x4e, 0xf8, 0x7b, 0x52, 0x7b, 0x44, 0x4a, 0xe0, 0x76, 0xa4, 0x27, 0xcc, 0x43, 0x7c,
	0x7b, 0x8c, 0x8f, 0xd7, 0xe0, 0x56, 0xb7, 0x4d, 0xe2, 0x44, 0xa6, 0x92, 0x25, 0x69, 0x7f, 0x5a,
	0x35, 0xd8, 0xd1, 0xb8, 0x78, 0xf7, 0x63, 0xc1, 0xfc, 0xad, 0x8b, 0x04, 0x1f, 0x60, 0x5a, 0x85,
	0x80, 0xd8, 0x66, 0xa3, 0xd7, 0x7d, 0x22, 0xc1, 0xca, 0xd4, 0xc6, 0x27, 0x11, 0x93, 0xd0, 0xc2,
	0x27, 0x70, 0xda, 0x45, 0x71, 0xd9, 0x3b, 0x07, 0x69, 0xf4, 0xe6, 0xf1, 0x3d, 0xc4, 0x04, 0x1f,
	0x61, 0xd6, 0x6c, 0x89, 0x0b, 0xd3, 0x32, 0x8c, 0x27, 0x58, 0xfe, 0xab, 0x1a, 0x5f, 0xd2, 0x3e,
	0x9b, 0xfb, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x85, 0x14, 0x87, 0x86, 0x4f, 0x02, 0x00, 0x00,
}
